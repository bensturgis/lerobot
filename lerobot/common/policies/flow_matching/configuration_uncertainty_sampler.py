from dataclasses import dataclass, field
from pathlib import Path

# Sub-configs for each uncertainty sampler.
@dataclass
class CrossLikLaplaceSamplerConfig:
    # Number of candidate action sequences to sample.
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False
    # Which layer(s) to place the Laplace posterior on:
    #  - "velocity_last": The final layer of the flow matching velocity model
    #  - "rgb_last": the final layer of the RGB encoder
    #  - "both": jointly on both layers
    laplace_scope: str = "both"
    # Parameters for the Laplace approximation calibration dataloader.
    calib_fraction: float = 1.0
    batch_size: int = 32
    # Flag to choose uncertainty metric: True for velocity norm, False for log-likelihood
    uncertainty_score: str = "vel_norm"

@dataclass
class CrossEnsembleSamplerConfig:
    # Number of candidate action sequences to sample .
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False
    # Path to the pretrained flow-matching model that serves as the “scorer”:
    # i.e., the model used to compute log-likelihoods for the action sequences
    # generated by the primary “sampler” flow-matching model.
    # If None and cross-likelihood sampling is requested, an error will be raised.
    scorer_model_path: str | Path | None = None
    # Which uncertainty metric to use:
    #  - "likelihood": negative log‐likelihood of the action sequence
    #  - "intermediate_vel_norm": average L2 norm of the velocity field over intermediate evaluation
    #       points of the ODE
    #  - "terminal_vel_norm": average L2-norm of the velocity field evaluated only for the final state
    #       of the ODE at times close to t=1.0
    #  - "intermediate_vel_diff": average L2 norm of the velocity differences between the scorer and sampler ODE
    #       over intermediate evaluation points of the ODE
    uncertainty_metric: str = "likelihood"

@dataclass
class ComposedLikSamplerConfig:
    # Number of candidate action sequences to sample .
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False
    # Flag to choose uncertainty metric: True for velocity norm, False for log-likelihood
    use_vel_score: bool = False

@dataclass
class LikSamplerConfig:
    # Number of candidate action sequences to sample.
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False

@dataclass
class EpsilonBallSamplerConfig:
    # Number of candidate action sequences to sample.
    num_action_seq_samples: int = 1
    # Radius of the input noise ball.
    epsilon: float = 1e-3
    # Number of samples to draw from epsilon-ball around initial noise samples.
    num_eps_ball_samples: int = 100

@dataclass
class UncertaintySamplerConfig:
    type: str = "cross_likelihood_ensemble"
    composed_likelihood_sampler: ComposedLikSamplerConfig = field(default_factory=ComposedLikSamplerConfig)
    cross_likelihood_ensemble_sampler: CrossEnsembleSamplerConfig = field(default_factory=CrossEnsembleSamplerConfig)
    cross_likelihood_laplace_sampler: CrossLikLaplaceSamplerConfig = field(default=CrossLikLaplaceSamplerConfig)
    likelihood_sampler: LikSamplerConfig = field(default_factory=LikSamplerConfig)
    epsilon_ball_sampler: EpsilonBallSamplerConfig = field(default_factory=EpsilonBallSamplerConfig)