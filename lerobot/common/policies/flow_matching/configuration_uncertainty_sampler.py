from dataclasses import dataclass, field
from pathlib import Path

# Sub-configs for each uncertainty sampler.
@dataclass
class CrossLikLaplaceSamplerConfig:
    # Number of candidate action sequences to sample .
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False

@dataclass
class CrossLikEnsembleSamplerConfig:
    # Number of candidate action sequences to sample .
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False
    # Path to the pretrained flow-matching model that serves as the “scorer”:
    # i.e., the model used to compute log-likelihoods for the action sequences
    # generated by the primary “sampler” flow-matching model.
    # If None and cross-likelihood sampling is requested, an error will be raised.
    scorer_model_path: str | Path | None = None

@dataclass
class ComposedLikSamplerConfig:
    # Number of candidate action sequences to sample .
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False

@dataclass
class LikSamplerConfig:
    # Number of candidate action sequences to sample.
    num_action_seq_samples: int = 1
    # Whether to compute the exact divergence or use the Hutchinson trace estimator
    # when computing the log-likelihood for an action sequence sample.
    exact_divergence: bool = False

@dataclass
class EpsilonBallSamplerConfig:
    # Number of candidate action sequences to sample.
    num_action_seq_samples: int = 1
    # Radius of the input noise ball.
    epsilon: float = 1e-3
    # Number of samples to draw from epsilon-ball around initial noise samples.
    num_eps_ball_samples: int = 100

@dataclass
class UncertaintySamplerConfig:
    type: str = "cross_likelihood_ensemble"
    composed_likelihood_sampler: ComposedLikSamplerConfig = field(default_factory=ComposedLikSamplerConfig)
    cross_likelihood_ensemble_sampler: CrossLikEnsembleSamplerConfig = field(default_factory=CrossLikEnsembleSamplerConfig)
    cross_likelihood_laplace_sampler: CrossLikLaplaceSamplerConfig = field(default=CrossLikLaplaceSamplerConfig)
    likelihood_sampler: LikSamplerConfig = field(default_factory=LikSamplerConfig)
    epsilon_ball_sampler: EpsilonBallSamplerConfig = field(default_factory=EpsilonBallSamplerConfig)